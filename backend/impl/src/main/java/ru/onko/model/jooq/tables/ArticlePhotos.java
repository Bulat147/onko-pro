/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.onko.model.jooq.Keys;
import ru.onko.model.jooq.Public;
import ru.onko.model.jooq.tables.records.ArticlePhotosRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticlePhotos extends TableImpl<ArticlePhotosRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.article_photos</code>
     */
    public static final ArticlePhotos ARTICLE_PHOTOS_ENTITY = new ArticlePhotos();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticlePhotosRecord> getRecordType() {
        return ArticlePhotosRecord.class;
    }

    /**
     * The column <code>public.article_photos.article_id</code>.
     */
    public final TableField<ArticlePhotosRecord, UUID> ARTICLE_ID = createField(DSL.name("article_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.article_photos.photo_id</code>.
     */
    public final TableField<ArticlePhotosRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID.nullable(false), this, "");

    private ArticlePhotos(Name alias, Table<ArticlePhotosRecord> aliased) {
        this(alias, aliased, null);
    }

    private ArticlePhotos(Name alias, Table<ArticlePhotosRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.article_photos</code> table reference
     */
    public ArticlePhotos(String alias) {
        this(DSL.name(alias), ARTICLE_PHOTOS_ENTITY);
    }

    /**
     * Create an aliased <code>public.article_photos</code> table reference
     */
    public ArticlePhotos(Name alias) {
        this(alias, ARTICLE_PHOTOS_ENTITY);
    }

    /**
     * Create a <code>public.article_photos</code> table reference
     */
    public ArticlePhotos() {
        this(DSL.name("article_photos"), null);
    }

    public <O extends Record> ArticlePhotos(Table<O> child, ForeignKey<O, ArticlePhotosRecord> key) {
        super(child, key, ARTICLE_PHOTOS_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ArticlePhotosRecord> getPrimaryKey() {
        return Keys.ARTICLE_PHOTOS_PKEY;
    }

    @Override
    public List<ForeignKey<ArticlePhotosRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ARTICLE_PHOTOS__ARTICLE_PHOTOS_ARTICLE_ID_FKEY, Keys.ARTICLE_PHOTOS__ARTICLE_PHOTOS_PHOTO_ID_FKEY);
    }

    private transient Article _article;
    private transient Photo _photo;

    /**
     * Get the implicit join path to the <code>public.article</code> table.
     */
    public Article article() {
        if (_article == null)
            _article = new Article(this, Keys.ARTICLE_PHOTOS__ARTICLE_PHOTOS_ARTICLE_ID_FKEY);

        return _article;
    }

    /**
     * Get the implicit join path to the <code>public.photo</code> table.
     */
    public Photo photo() {
        if (_photo == null)
            _photo = new Photo(this, Keys.ARTICLE_PHOTOS__ARTICLE_PHOTOS_PHOTO_ID_FKEY);

        return _photo;
    }

    @Override
    public ArticlePhotos as(String alias) {
        return new ArticlePhotos(DSL.name(alias), this);
    }

    @Override
    public ArticlePhotos as(Name alias) {
        return new ArticlePhotos(alias, this);
    }

    @Override
    public ArticlePhotos as(Table<?> alias) {
        return new ArticlePhotos(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticlePhotos rename(String name) {
        return new ArticlePhotos(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticlePhotos rename(Name name) {
        return new ArticlePhotos(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ArticlePhotos rename(Table<?> name) {
        return new ArticlePhotos(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
