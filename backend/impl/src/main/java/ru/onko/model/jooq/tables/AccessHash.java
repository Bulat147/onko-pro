/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.onko.model.jooq.Keys;
import ru.onko.model.jooq.Public;
import ru.onko.model.jooq.tables.records.AccessHashRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessHash extends TableImpl<AccessHashRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.access_hash</code>
     */
    public static final AccessHash ACCESS_HASH_ENTITY = new AccessHash();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccessHashRecord> getRecordType() {
        return AccessHashRecord.class;
    }

    /**
     * The column <code>public.access_hash.id</code>.
     */
    public final TableField<AccessHashRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.access_hash.user_id</code>.
     */
    public final TableField<AccessHashRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.access_hash.expires_date</code>.
     */
    public final TableField<AccessHashRecord, LocalDateTime> EXPIRES_DATE = createField(DSL.name("expires_date"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private AccessHash(Name alias, Table<AccessHashRecord> aliased) {
        this(alias, aliased, null);
    }

    private AccessHash(Name alias, Table<AccessHashRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.access_hash</code> table reference
     */
    public AccessHash(String alias) {
        this(DSL.name(alias), ACCESS_HASH_ENTITY);
    }

    /**
     * Create an aliased <code>public.access_hash</code> table reference
     */
    public AccessHash(Name alias) {
        this(alias, ACCESS_HASH_ENTITY);
    }

    /**
     * Create a <code>public.access_hash</code> table reference
     */
    public AccessHash() {
        this(DSL.name("access_hash"), null);
    }

    public <O extends Record> AccessHash(Table<O> child, ForeignKey<O, AccessHashRecord> key) {
        super(child, key, ACCESS_HASH_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AccessHashRecord> getPrimaryKey() {
        return Keys.ACCESS_HASH_PKEY;
    }

    @Override
    public List<ForeignKey<AccessHashRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ACCESS_HASH__ACCESS_HASH_USER_ID_FKEY);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.ACCESS_HASH__ACCESS_HASH_USER_ID_FKEY);

        return _account;
    }

    @Override
    public AccessHash as(String alias) {
        return new AccessHash(DSL.name(alias), this);
    }

    @Override
    public AccessHash as(Name alias) {
        return new AccessHash(alias, this);
    }

    @Override
    public AccessHash as(Table<?> alias) {
        return new AccessHash(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessHash rename(String name) {
        return new AccessHash(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessHash rename(Name name) {
        return new AccessHash(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AccessHash rename(Table<?> name) {
        return new AccessHash(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super UUID, ? super UUID, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
