/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import ru.onko.model.jooq.enums.AccountRole;
import ru.onko.model.jooq.tables.AccountRoles;
import ru.onko.model.jooq.tables.pojos.AccountRolesEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRolesRecord extends UpdatableRecordImpl<AccountRolesRecord> implements Record2<UUID, AccountRole> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.account_roles.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.account_roles.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.account_roles.account_role</code>.
     */
    public void setAccountRole(AccountRole value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.account_roles.account_role</code>.
     */
    public AccountRole getAccountRole() {
        return (AccountRole) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, AccountRole> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, AccountRole> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, AccountRole> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AccountRoles.ACCOUNT_ROLES_ENTITY.ACCOUNT_ID;
    }

    @Override
    public Field<AccountRole> field2() {
        return AccountRoles.ACCOUNT_ROLES_ENTITY.ACCOUNT_ROLE;
    }

    @Override
    public UUID component1() {
        return getAccountId();
    }

    @Override
    public AccountRole component2() {
        return getAccountRole();
    }

    @Override
    public UUID value1() {
        return getAccountId();
    }

    @Override
    public AccountRole value2() {
        return getAccountRole();
    }

    @Override
    public AccountRolesRecord value1(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public AccountRolesRecord value2(AccountRole value) {
        setAccountRole(value);
        return this;
    }

    @Override
    public AccountRolesRecord values(UUID value1, AccountRole value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRolesRecord
     */
    public AccountRolesRecord() {
        super(AccountRoles.ACCOUNT_ROLES_ENTITY);
    }

    /**
     * Create a detached, initialised AccountRolesRecord
     */
    public AccountRolesRecord(UUID accountId, AccountRole accountRole) {
        super(AccountRoles.ACCOUNT_ROLES_ENTITY);

        setAccountId(accountId);
        setAccountRole(accountRole);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccountRolesRecord
     */
    public AccountRolesRecord(AccountRolesEntity value) {
        super(AccountRoles.ACCOUNT_ROLES_ENTITY);

        if (value != null) {
            setAccountId(value.getAccountId());
            setAccountRole(value.getAccountRole());
            resetChangedOnNotNull();
        }
    }
}
