/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;

import ru.onko.model.jooq.tables.NotesSymptoms;
import ru.onko.model.jooq.tables.pojos.NotesSymptomsEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotesSymptomsRecord extends UpdatableRecordImpl<NotesSymptomsRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.notes_symptoms.note_id</code>.
     */
    public void setNoteId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.notes_symptoms.note_id</code>.
     */
    public UUID getNoteId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.notes_symptoms.symptom_id</code>.
     */
    public void setSymptomId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.notes_symptoms.symptom_id</code>.
     */
    public UUID getSymptomId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<UUID, UUID> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return NotesSymptoms.NOTES_SYMPTOMS_ENTITY.NOTE_ID;
    }

    @Override
    public Field<UUID> field2() {
        return NotesSymptoms.NOTES_SYMPTOMS_ENTITY.SYMPTOM_ID;
    }

    @Override
    public UUID component1() {
        return getNoteId();
    }

    @Override
    public UUID component2() {
        return getSymptomId();
    }

    @Override
    public UUID value1() {
        return getNoteId();
    }

    @Override
    public UUID value2() {
        return getSymptomId();
    }

    @Override
    public NotesSymptomsRecord value1(UUID value) {
        setNoteId(value);
        return this;
    }

    @Override
    public NotesSymptomsRecord value2(UUID value) {
        setSymptomId(value);
        return this;
    }

    @Override
    public NotesSymptomsRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotesSymptomsRecord
     */
    public NotesSymptomsRecord() {
        super(NotesSymptoms.NOTES_SYMPTOMS_ENTITY);
    }

    /**
     * Create a detached, initialised NotesSymptomsRecord
     */
    public NotesSymptomsRecord(UUID noteId, UUID symptomId) {
        super(NotesSymptoms.NOTES_SYMPTOMS_ENTITY);

        setNoteId(noteId);
        setSymptomId(symptomId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NotesSymptomsRecord
     */
    public NotesSymptomsRecord(NotesSymptomsEntity value) {
        super(NotesSymptoms.NOTES_SYMPTOMS_ENTITY);

        if (value != null) {
            setNoteId(value.getNoteId());
            setSymptomId(value.getSymptomId());
            resetChangedOnNotNull();
        }
    }
}
