/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

import ru.onko.model.jooq.tables.AccessHash;
import ru.onko.model.jooq.tables.pojos.AccessHashEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccessHashRecord extends UpdatableRecordImpl<AccessHashRecord> implements Record3<UUID, UUID, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.access_hash.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.access_hash.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.access_hash.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.access_hash.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.access_hash.expires_date</code>.
     */
    public void setExpiresDate(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.access_hash.expires_date</code>.
     */
    public LocalDateTime getExpiresDate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return AccessHash.ACCESS_HASH_ENTITY.ID;
    }

    @Override
    public Field<UUID> field2() {
        return AccessHash.ACCESS_HASH_ENTITY.USER_ID;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return AccessHash.ACCESS_HASH_ENTITY.EXPIRES_DATE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public LocalDateTime component3() {
        return getExpiresDate();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public LocalDateTime value3() {
        return getExpiresDate();
    }

    @Override
    public AccessHashRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AccessHashRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public AccessHashRecord value3(LocalDateTime value) {
        setExpiresDate(value);
        return this;
    }

    @Override
    public AccessHashRecord values(UUID value1, UUID value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccessHashRecord
     */
    public AccessHashRecord() {
        super(AccessHash.ACCESS_HASH_ENTITY);
    }

    /**
     * Create a detached, initialised AccessHashRecord
     */
    public AccessHashRecord(UUID id, UUID userId, LocalDateTime expiresDate) {
        super(AccessHash.ACCESS_HASH_ENTITY);

        setId(id);
        setUserId(userId);
        setExpiresDate(expiresDate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised AccessHashRecord
     */
    public AccessHashRecord(AccessHashEntity value) {
        super(AccessHash.ACCESS_HASH_ENTITY);

        if (value != null) {
            setId(value.getId());
            setUserId(value.getUserId());
            setExpiresDate(value.getExpiresDate());
            resetChangedOnNotNull();
        }
    }
}
