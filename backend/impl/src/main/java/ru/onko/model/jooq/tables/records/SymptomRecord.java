/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.onko.model.jooq.tables.Symptom;
import ru.onko.model.jooq.tables.pojos.SymptomEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SymptomRecord extends UpdatableRecordImpl<SymptomRecord> implements Record4<UUID, String, UUID, Boolean> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.symptom.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.symptom.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.symptom.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.symptom.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.symptom.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.symptom.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(2);
    }

    /**
     * Setter for <code>public.symptom.active</code>.
     */
    public void setActive(Boolean value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.symptom.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, UUID, Boolean> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Symptom.SYMPTOM_ENTITY.ID;
    }

    @Override
    public Field<String> field2() {
        return Symptom.SYMPTOM_ENTITY.NAME;
    }

    @Override
    public Field<UUID> field3() {
        return Symptom.SYMPTOM_ENTITY.ACCOUNT_ID;
    }

    @Override
    public Field<Boolean> field4() {
        return Symptom.SYMPTOM_ENTITY.ACTIVE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public UUID component3() {
        return getAccountId();
    }

    @Override
    public Boolean component4() {
        return getActive();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public UUID value3() {
        return getAccountId();
    }

    @Override
    public Boolean value4() {
        return getActive();
    }

    @Override
    public SymptomRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public SymptomRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public SymptomRecord value3(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public SymptomRecord value4(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public SymptomRecord values(UUID value1, String value2, UUID value3, Boolean value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SymptomRecord
     */
    public SymptomRecord() {
        super(Symptom.SYMPTOM_ENTITY);
    }

    /**
     * Create a detached, initialised SymptomRecord
     */
    public SymptomRecord(UUID id, String name, UUID accountId, Boolean active) {
        super(Symptom.SYMPTOM_ENTITY);

        setId(id);
        setName(name);
        setAccountId(accountId);
        setActive(active);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised SymptomRecord
     */
    public SymptomRecord(SymptomEntity value) {
        super(Symptom.SYMPTOM_ENTITY);

        if (value != null) {
            setId(value.getId());
            setName(value.getName());
            setAccountId(value.getAccountId());
            setActive(value.getActive());
            resetChangedOnNotNull();
        }
    }
}
