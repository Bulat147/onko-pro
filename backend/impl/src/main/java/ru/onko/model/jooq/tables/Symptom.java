/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import ru.onko.model.jooq.Keys;
import ru.onko.model.jooq.Public;
import ru.onko.model.jooq.tables.records.SymptomRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Symptom extends TableImpl<SymptomRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.symptom</code>
     */
    public static final Symptom SYMPTOM_ENTITY = new Symptom();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SymptomRecord> getRecordType() {
        return SymptomRecord.class;
    }

    /**
     * The column <code>public.symptom.id</code>.
     */
    public final TableField<SymptomRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("uuid_generate_v4()"), SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.symptom.name</code>.
     */
    public final TableField<SymptomRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.symptom.account_id</code>.
     */
    public final TableField<SymptomRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.symptom.active</code>.
     */
    public final TableField<SymptomRecord, Boolean> ACTIVE = createField(DSL.name("active"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private Symptom(Name alias, Table<SymptomRecord> aliased) {
        this(alias, aliased, null);
    }

    private Symptom(Name alias, Table<SymptomRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.symptom</code> table reference
     */
    public Symptom(String alias) {
        this(DSL.name(alias), SYMPTOM_ENTITY);
    }

    /**
     * Create an aliased <code>public.symptom</code> table reference
     */
    public Symptom(Name alias) {
        this(alias, SYMPTOM_ENTITY);
    }

    /**
     * Create a <code>public.symptom</code> table reference
     */
    public Symptom() {
        this(DSL.name("symptom"), null);
    }

    public <O extends Record> Symptom(Table<O> child, ForeignKey<O, SymptomRecord> key) {
        super(child, key, SYMPTOM_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<SymptomRecord> getPrimaryKey() {
        return Keys.SYMPTOM_PKEY;
    }

    @Override
    public List<ForeignKey<SymptomRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SYMPTOM__SYMPTOM_ACCOUNT_ID_FKEY);
    }

    private transient Account _account;

    /**
     * Get the implicit join path to the <code>public.account</code> table.
     */
    public Account account() {
        if (_account == null)
            _account = new Account(this, Keys.SYMPTOM__SYMPTOM_ACCOUNT_ID_FKEY);

        return _account;
    }

    @Override
    public Symptom as(String alias) {
        return new Symptom(DSL.name(alias), this);
    }

    @Override
    public Symptom as(Name alias) {
        return new Symptom(alias, this);
    }

    @Override
    public Symptom as(Table<?> alias) {
        return new Symptom(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Symptom rename(String name) {
        return new Symptom(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symptom rename(Name name) {
        return new Symptom(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Symptom rename(Table<?> name) {
        return new Symptom(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, UUID, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super UUID, ? super String, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super UUID, ? super String, ? super UUID, ? super Boolean, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
