/*
 * This file is generated by jOOQ.
 */
package ru.onko.model.jooq.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import ru.onko.model.jooq.tables.Article;
import ru.onko.model.jooq.tables.pojos.ArticleEntity;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ArticleRecord extends UpdatableRecordImpl<ArticleRecord> implements Record4<UUID, String, String, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.article.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.article.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.article.title</code>.
     */
    public void setTitle(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.article.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.article.content</code>.
     */
    public void setContent(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.article.content</code>.
     */
    public String getContent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.article.position</code>.
     */
    public void setPosition(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.article.position</code>.
     */
    public String getPosition() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Article.ARTICLE_ENTITY.ID;
    }

    @Override
    public Field<String> field2() {
        return Article.ARTICLE_ENTITY.TITLE;
    }

    @Override
    public Field<String> field3() {
        return Article.ARTICLE_ENTITY.CONTENT;
    }

    @Override
    public Field<String> field4() {
        return Article.ARTICLE_ENTITY.POSITION;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getContent();
    }

    @Override
    public String component4() {
        return getPosition();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getContent();
    }

    @Override
    public String value4() {
        return getPosition();
    }

    @Override
    public ArticleRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public ArticleRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public ArticleRecord value3(String value) {
        setContent(value);
        return this;
    }

    @Override
    public ArticleRecord value4(String value) {
        setPosition(value);
        return this;
    }

    @Override
    public ArticleRecord values(UUID value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ArticleRecord
     */
    public ArticleRecord() {
        super(Article.ARTICLE_ENTITY);
    }

    /**
     * Create a detached, initialised ArticleRecord
     */
    public ArticleRecord(UUID id, String title, String content, String position) {
        super(Article.ARTICLE_ENTITY);

        setId(id);
        setTitle(title);
        setContent(content);
        setPosition(position);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised ArticleRecord
     */
    public ArticleRecord(ArticleEntity value) {
        super(Article.ARTICLE_ENTITY);

        if (value != null) {
            setId(value.getId());
            setTitle(value.getTitle());
            setContent(value.getContent());
            setPosition(value.getPosition());
            resetChangedOnNotNull();
        }
    }
}
